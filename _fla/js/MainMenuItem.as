package js{	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Bitmap;	import flash.filters.DropShadowFilter;	import flash.events.MouseEvent;	import flash.display.Bitmap;	import flash.filters.BlurFilter;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import com.greensock.TweenLite;	import com.greensock.easing.Back;		public class MainMenuItem extends MovieClip	{				private var isExternal:Boolean;		private var itemLabel:String;		private var itemLabelHover:String;		private var callback:Function;		private var blackDust:Bitmap;		private var whiteDust:Bitmap;		private var margin:int;		private var padding:int;		private var parentRadius:int;		private var blackContainer:MovieClip;		private var whiteContainer:MovieClip;		private var theShadow:DropShadowFilter;		private var theBlur:BlurFilter;		private var theBlurAmount:int;		private var theHoverBlur:BlurFilter;		private var theHoverBlurAmount:int;		private var displaySpeed:Number;		private var displayDelayAfter:Number;		private var displayRotation:int;		private var hoverDefaultPosition:int;		private var hoverSpeed:Number;		private var callbackParameter:String;		private var callbackTarget:String;		private var objectIndex:int;		private var parentMenu:MainMenu;		private var originalRotation:int;		private var theSubmenu:Submenu;				/**		 * Inits the menu item		 * @param	int			objectIndex		the object index		 * @param	XML			parameters		item parameters (get from the config file)		 * @param	int			parentRadius	the main circle radius		 * @param	Bitmap		blackDust		the dust		 * @param	Bitmap		whiteDust		the dust		 */		public function MainMenuItem(objectIndex:int , parameters , callback:Function , parentRadius:int , blackDust:Bitmap , whiteDust:Bitmap)		{			this.objectIndex = objectIndex;			this.isExternal = Main.toBoolean(parameters.@external.toString());			this.itemLabel = parameters.@inactive_label.toString();			this.itemLabelHover = parameters.@hover_label.toString();				this.callback = callback;			this.callbackParameter = parameters.@callback.toString();			this.callbackTarget = parameters.@target.toString();			this.blackDust = blackDust;			this.whiteDust = whiteDust;			this.margin = int(parameters.@margin.toString());			this.padding = int(parameters.@padding.toString());			this.displaySpeed = Number(parameters.@speed.toString());			this.displayDelayAfter = Number(parameters.@delay.toString());			this.displayRotation = int(parameters.@rotation.toString());			this.theShadow = new DropShadowFilter(0 , 0 , 0x000000 , Number(parameters.@shadow_alpha.toString()) , int(parameters.@shadow_radius.toString()) , int(parameters.@shadow_radius.toString()));			this.theBlurAmount = int(parameters.@blur.toString());			this.theBlur = new BlurFilter(1 , this.theBlurAmount , 1);			this.theHoverBlurAmount = int(parameters.@blur_hover.toString());			this.theHoverBlur = new BlurFilter(1 , this.theHoverBlurAmount , 1);			this.parentRadius = parentRadius;			this.hoverSpeed = Number(parameters.@hover_speed.toString());			this.blackContainer = new MovieClip();			this.whiteContainer = new MovieClip();			this.buttonMode = true;			this.mouseChildren = false;			if (stage)				this.addedToStage(null);			else				this.addEventListener(Event.ADDED_TO_STAGE , this.addedToStage);		}				/**		 * Registers the parent menu		 * @param	MainMenu	parentMenu	the parent menu		 * @return	void		 */		public function registerParentMenu(parentMenu:MainMenu):void		{			this.parentMenu = parentMenu;		}				/**		 * Registers a submenu		 * @param	SubMenu		submenu		the submenu object		 * @return	void		 */		public function registerSubmenu(submenu:Submenu):void		{			this.theSubmenu = submenu;		}				/**		 * Sets the initial object rotation		 * @param	int		val	the value		 * @return	void		 */		public function setOriginalRotation(val:int):void		{			this.originalRotation = val;			this.rotation = val;		}				/**		 * Gets the initial object rotation		 * @param	int		rotation	the value		 * @return	void		 */		public function getOriginalRotation():int		{			return this.originalRotation;		}				/**		 * Fired when added to stage		 * @param	Event	evt		the event		 * @return	void		 */		private function addedToStage(evt:Event = null):void		{			if (evt != null)				evt.target.removeEventListener(Event.ADDED_TO_STAGE , this.addedToStage);			this.visible = false;			// Sets labels			this.menuLabelText.text = this.itemLabel;			this.menuLabelText.width = this.menuLabelText.textWidth + 5;			this.menuLabelHoverText.text = this.itemLabelHover;			this.menuLabelHoverText.width = this.menuLabelHoverText.textWidth + 5;			// Sets black container			this.blackContainer.addChild(this.blackDust);			this.blackContainer.addChild(this.menuLabelText);			this.blackContainer.addChild(this.blackMask);			this.blackMask.x = 0;			this.blackMask.y = 0;			this.blackMask.width = this.menuLabelText.width + (this.padding * 2);			this.blackMask.height = this.menuLabelText.height + (this.padding * 2);			this.blackDust.x = this.randomNumber(-(this.blackDust.width - this.blackMask.width) , 0);			this.blackDust.y = this.randomNumber(-(this.blackDust.height - this.blackMask.height) , 0);						this.blackContainer.x = this.parentRadius + this.margin;			this.blackContainer.y = int(-this.blackMask.height / 2);			this.blackContainer.mask = this.blackMask;			this.menuLabelText.x = this.padding;			this.menuLabelText.y = this.padding;			this.addChild(this.blackContainer);			// Sets white container			this.whiteContainer.addChild(this.whiteDust);			this.whiteContainer.addChild(this.menuLabelHoverText);			this.whiteContainer.addChild(this.whiteMask);			this.whiteMask.x = 0;			this.whiteMask.y = 0;			this.whiteMask.width = this.menuLabelHoverText.width + (this.padding * 2);			this.whiteMask.height = this.menuLabelHoverText.height + (this.padding * 2);			this.whiteDust.x = this.randomNumber(-(this.whiteDust.width - this.whiteMask.width) , 0);			this.whiteDust.y = this.randomNumber(-(this.whiteDust.height - this.whiteMask.height) , 0);						this.whiteContainer.x = this.parentRadius + this.margin + this.blackMask.width + this.margin;			this.whiteContainer.y = int(-this.whiteMask.height / 2);			this.whiteContainer.mask = this.whiteMask;			this.menuLabelHoverText.x = this.padding;			this.menuLabelHoverText.y = this.padding;			this.hoverDefaultPosition = this.whiteContainer.x;			this.whiteContainer.visible = false;			this.addChild(this.whiteContainer);			// Filters			this.filters = [this.theShadow , this.theBlur];			this.cacheAsBitmap = true;			//this.whiteContainer.filters = [this.theHoverBlur];			// Hover state			this.onOut(null , 0);		}				/**		 * Displays the item		 * @param	Number		delay		the animation delay		 * @param	Function	callback	the function to call when the animation is done (optional)		 * @return	void		 */		public function displayItem(animationDelay:Number , callback:Function = null):void		{			// Prepares			this.alpha = 0;			this.rotation += this.displayRotation;			this.theBlur.blurX = this.theBlurAmount;			this.theBlur.blurY = this.theBlurAmount;			this.visible = true;			// Tweens			TweenLite.to(this , this.displaySpeed , {alpha:1 , rotation:rotation - displayRotation , blurFilter:{blurX:0 , blurY:0} , delay:animationDelay , onComplete:callback , ease:Back.easeIn});		}				/**		 * Enables navigation		 * @return	void		 */		public function enableItem():void		{			this.addEventListener(MouseEvent.CLICK , onClick);			this.addEventListener(MouseEvent.MOUSE_OVER , onHover);			this.addEventListener(MouseEvent.MOUSE_OUT , onOut);		}				/**		 * Gets the delay to apply after the display animation		 * @return	Number		 */		public function getDelayAfter():Number		{			return this.displayDelayAfter;		}		/**		 * Hides the item		 * @param	Number		delay		the animation delay		 * @param	Function	callback	the function to call when the animation is done (optional)		 * @return	void		 */		public function hideItem(animationDelay:Number , callback:Function = null):void		{			// Events			this.removeEventListener(MouseEvent.CLICK , onClick);			this.removeEventListener(MouseEvent.MOUSE_OVER , onHover);			this.removeEventListener(MouseEvent.MOUSE_OUT , onOut);			// Prepares			this.theBlur.blurX = 1;			this.theBlur.blurY = this.theBlurAmount;			// Tweens and callback			TweenLite.to(this , this.displaySpeed , {delay:animationDelay , alpha:0 , rotation:rotation + displayRotation , blurFilter:{blurX:theBlurAmount , blurY:theBlurAmount} , ease:Back.easeIn , onComplete:hideDone , onCompleteParams:[callback]});		}		/**		 * Called after the hiding animation		 * @param	Function	callback	the function to call when the animation is done (optional)		 * @return	void		 */		private function hideDone(callback:Function):void		{			this.visible = false;			this.onOut(null , 0);			if (callback != null)				callback();		}		/**		 * Called on click		 * @param	MouseEvent	evt		the mouse event		 * @return	void		 */		private function onClick(evt:MouseEvent):void		{			if (this.isExternal)				this.redirect(this.callbackParameter , this.callbackTarget);			else				this.callback(this.callbackParameter);		}				/**		 * Called on mouse hover		 * @param	MouseEvent	evt		the mouse event		 * @param	Number		speed	the animation speed (optional)		 * @return	void		 */		private function onHover(evt:MouseEvent , speed:Number = -1):void		{			// Prepares			var theSpeed:Number = (speed == -1) ? this.hoverSpeed : speed;			this.whiteContainer.x = this.hoverDefaultPosition - 10;			this.whiteContainer.alpha = 0;			this.theHoverBlur.blurX = this.theHoverBlurAmount;			this.theHoverBlur.blurY = this.theHoverBlurAmount;			this.whiteContainer.visible = true;			// Tweens			TweenLite.to(this.whiteContainer , theSpeed , {x:hoverDefaultPosition , blurFilter:{blurX:0 , blurY:0} , alpha:1});		}				/**		 * Called on mouse out		 * @param	MouseEvent	evt		the mouse event		 * @param	Number		speed	the animation speed (optional)		 * @return	void		 */		private function onOut(evt:MouseEvent , speed:Number = -1):void		{			// Prepares			var theSpeed:Number = (speed == -1) ? this.hoverSpeed : speed;			this.whiteContainer.x = this.hoverDefaultPosition;			// Tweens			TweenLite.to(this.whiteContainer , theSpeed , {x:hoverDefaultPosition - 10 , blurFilter:{blurX:theHoverBlurAmount , blurY:theHoverBlurAmount} , alpha:0 , onComplete:function() { whiteContainer.visible = false; }});		}				/**		 * Returns a random number		 * @param	int		low		the lowest one		 * @param	int		high	the highest one		 */		function randomNumber(low:int , high:int):Number		{		  return Math.floor(Math.random() * (1 + high - low)) + low;		}		/**		 * External redirection		 * @param	String	url		the URL		 * @param	String	target	the target (_self, _blank, ...)		 */		private function redirect(url:String , target:String):void		{			Main.debug('Redirect to ' + url);			navigateToURL(new URLRequest(url) , target);		}			}}