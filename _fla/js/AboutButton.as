package js{	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Bitmap;	import flash.events.MouseEvent;	import flash.display.Bitmap;	import flash.filters.BlurFilter;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import com.greensock.TweenLite;	import com.greensock.easing.Back;	import com.greensock.easing.Cubic;		public class AboutButton extends MovieClip	{				private var itemLabel:String;		private var callback:Function;		private var blackDust:Bitmap;		private var margin:int;		private var padding:int;		private var parentRadius:int;		private var blackContainer:MovieClip;		private var displayRotation:int;		private var initialRotation:int;		private var rotationAmplitude:int;		private var rotationSpeed:Number;		private var theBlur:BlurFilter;		private var blurAmount:int;		private var hoverSpeed:Number;		private var isDisplayed:Boolean;		private var persistence:Number;		private var isHover:Boolean;				/**		 * Inits the menu item		 * @param	int			objectIndex		the object index		 * @param	XML			parameters		item parameters (get from the config file)		 * @param	int			parentRadius	the main circle radius		 * @param	Bitmap		blackDust		the dust		 */		public function AboutButton(parameters , callback:Function , parentRadius:int , blackDust:Bitmap)		{			this.visible = false;			this.isDisplayed = false;			this.isHover = false;			this.itemLabel = parameters.@label.toString();			this.callback = callback;			this.blackDust = blackDust;			this.margin = int(parameters.@margin.toString());			this.padding = int(parameters.@padding.toString());			this.initialRotation = int(parameters.@rotation.toString());			this.rotationAmplitude = int(parameters.@amplitude.toString());			this.blurAmount = int(parameters.@blur.toString());			this.hoverSpeed = Number(parameters.@hover_speed.toString());			this.persistence = Number(parameters.@persistence.toString());			this.theBlur = new BlurFilter(0 , 0 , 1);			this.rotation = this.initialRotation;			this.parentRadius = parentRadius;			this.rotationSpeed = Number(parameters.@speed.toString());			this.blackContainer = new MovieClip();			this.buttonMode = true;			this.mouseChildren = false;			if (stage)				this.addedToStage(null);			else				this.addEventListener(Event.ADDED_TO_STAGE , this.addedToStage);		}				/**		 * Fired when added to stage		 * @param	Event	evt		the event		 * @return	void		 */		private function addedToStage(evt:Event = null):void		{			if (evt != null)				evt.target.removeEventListener(Event.ADDED_TO_STAGE , this.addedToStage);			// Sets labels			this.menuLabelText.text = this.itemLabel;			this.menuLabelText.width = this.menuLabelText.textWidth + 5;			// Sets black container			this.blackContainer.addChild(this.blackDust);			this.blackContainer.addChild(this.menuLabelText);			this.blackContainer.addChild(this.blackMask);			this.blackMask.x = 0;			this.blackMask.y = 0;			this.blackMask.width = this.menuLabelText.width + (this.padding * 2);			this.blackMask.height = this.menuLabelText.height + (this.padding * 2);			this.blackDust.x = this.randomNumber(-(this.blackDust.width - this.blackMask.width) , 0);			this.blackDust.y = this.randomNumber(-(this.blackDust.height - this.blackMask.height) , 0);						this.blackContainer.x = this.parentRadius + this.margin;			this.blackContainer.y = int(-this.blackMask.height / 2);			this.blackContainer.mask = this.blackMask;			this.menuLabelText.x = this.padding;			this.menuLabelText.y = this.padding;			this.addChild(this.blackContainer);			this.filters = [this.theBlur];		}		/**		 * Returns the persistence		 * @return	Number		 */		public function getPersistence():Number		{			return this.persistence;		}		/**		 * Called on click		 * @param	MouseEvent	evt		the mouse event		 * @return	void		 */		private function onClick(evt:MouseEvent):void		{			this.callback();		}				/**		 * Displays the button		 * @return	void		 */		public function displayButton():void		{			if (this.isDisplayed)				return;			this.addEventListener(MouseEvent.CLICK , onClick);			this.addEventListener(MouseEvent.MOUSE_OVER , onHover);			this.addEventListener(MouseEvent.MOUSE_OUT , onOut);			// Prepares			this.isDisplayed = true;			this.alpha = 0;			this.mouseEnabled = true;			this.visible = true;			this.theBlur.blurX = this.blurAmount;			this.theBlur.blurY = this.blurAmount;			TweenLite.to(this , this.hoverSpeed , {alpha:1 , blurFilter:{blurX:0 , blurY:0} , overwrite:true});		}		/**		 * Hides the button		 * @return	void		 */		public function hideButton():void		{			if (this.isHover)				return;			TweenLite.to(this , this.hoverSpeed , {alpha:0 , blurFilter:{blurX:blurAmount , blurY:blurAmount} , overwrite:true , onComplete:wasHidden});			this.removeEventListener(MouseEvent.CLICK , onClick);			this.removeEventListener(MouseEvent.MOUSE_OVER , onHover);			this.removeEventListener(MouseEvent.MOUSE_OUT , onOut);		}				/**		 * Called when the button has been hidden		 * @return	void		 */		private function wasHidden():void		{			this.visible = false;			this.mouseEnabled = false;			this.isDisplayed = false;		}				/**		 * Hovered		 * @param	MouseEvent	evt		the mouse event		 * @return void		 */		private function onHover(evt:MouseEvent):void		{			this.isHover = true;		}				/**		 * Hover end		 * @param	MouseEvent	evt		the mouse event		 * @return void		 */		private function onOut(evt:MouseEvent):void		{			this.isHover = false;		}		/**		 * Moves the button		 * @param	MouseEvent	evt		the mouse event		 */		public function moveButton(evt:MouseEvent):void		{			var theRotation:Number = this.convertRange(0 , stage.stageHeight , evt.stageY , this.initialRotation + this.rotationAmplitude , this.initialRotation);			theRotation = Math.floor(theRotation * 1000) / 1000;			TweenLite.to(this , this.rotationSpeed , {rotation:theRotation , ease:Cubic.easeOut , overwrite:false});					}		 				/**		 * Returns a random number		 * @param	int		low		the lowest one		 * @param	int		high	the highest one		 */		function randomNumber(low:int , high:int):Number		{		  return Math.floor(Math.random() * (1 + high - low)) + low;		}		/**		 * Ranges calculation: Takes a range and a value in it, and translates the value using a second range		 * @param	Number	range1Min		 * @param	Number	range1Max		 * @param	Number 	range1Value		 * @param	Number	range2Min		 * @param	Number	range2Max		 * @return	Number		 */		private function convertRange(range1Min:Number , range1Max:Number , range1Value:Number , range2Min:Number , range2Max:Number):Number		{			return ((range1Value - range1Min) / ((range1Max - range1Min) / (range2Max - range2Min))) + range2Min;		}	}}