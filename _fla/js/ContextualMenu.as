package js{		import flash.ui.ContextMenu;	import flash.ui.ContextMenuItem;	import flash.display.InteractiveObject;	import flash.events.ContextMenuEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;			public class ContextualMenu	{				private var theMenu:ContextMenu;				/**		 * Constructor		 */		public function ContextualMenu()		{			this.theMenu = new ContextMenu();			this.theMenu.hideBuiltInItems();		}				/**		 * Registers an item (will be automatically disabled if URL and callback aren't set		 * @param	String		theLabel			item label		 * @param	mixed		callback			the callback. May be a string (URL) or a function		 * @param	Boolean		separatorBefore		if the item has a separator		 * @param	String		callbackTarget		if the callback is an URL, the target will be used		 * @return	void		 */		public function addItem(caption:String , callback = null , separatorBefore:Boolean = false , callbackTarget:String = '_self'):void		{			var enable:Boolean = (callback != null) ? true : false;			var menuItem = new ContextMenuItem(caption , separatorBefore , enable);			this.theMenu.customItems.push(menuItem);			// URL case			if (typeof(callback) == 'string')				menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT , function(evt:ContextMenuEvent)				{					navigateToURL(new URLRequest(callback) , callbackTarget);				});			else if (typeof(callback) == 'function')				menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT , function(evt:ContextMenuEvent)				{					callback();				});		}				/**		 * Enables the custom menu		 * @param	DisplayObject	context		the DisplayObject to link the menu with		 * @return	void		 */		public function enable(context:InteractiveObject):void		{			context.contextMenu = this.theMenu;		}	}}