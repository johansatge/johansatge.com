package js{		import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Bitmap;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	import flash.filters.BlurFilter;	import flash.net.URLVariables;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;	import com.greensock.TweenLite;	import com.greensock.TimelineLite;	import com.greensock.easing.Back;		public class ContactPage extends MovieClip	{		private var theShadow:DropShadowFilter;		private var theBlur:BlurFilter;		private var theBlurAmount:int;		private var currentY:int;		private var closeCallback:Function;		private var XMLParameters:XMLList;		private var formURL:String;		private var formMethod:String;		private var displaySpeed:Number;		private var displayAmplitude:int;		private var messagesSpeed:Number;		private var lastAction:String;			/**		 * Constructor.		 * @param	XMLList		parameters		the page parameters (XML node)		 * @param	Function	closeCallback	the callack called when closing the element		 * @param	String		siteUR			the URL of the website		 */		public function ContactPage(parameters:XMLList , closeCallback:Function , siteURL:String)		{			// Setups vars			this.visible = false;			this.lastAction = '';			this.displaySpeed = Number(parameters.@display_speed.toString());			this.displayAmplitude = int(parameters.@display_amplitude.toString());			this.messagesSpeed = Number(parameters.@msg_speed.toString());			this.closeCallback = closeCallback;			this.theShadow = new DropShadowFilter(0 , 0 , 0x000000 , Number(parameters.@shadow_alpha.toString()) , int(parameters.@shadow_radius.toString()) , int(parameters.@shadow_radius.toString()));			this.theBlurAmount = int(parameters.@blur.toString());			this.theBlur = new BlurFilter(1 , this.theBlurAmount , 1);			this.XMLParameters = parameters;			this.formURL = siteURL + parameters.@form.toString();			this.formMethod = parameters.@method.toString();			// Stage			if (stage)				this.addedToStage(null);			else				this.addEventListener(Event.ADDED_TO_STAGE , this.addedToStage);		}		/**		 * Fired when added to stage		 * @param	Event	evt		the event		 * @return	void		 */		private function addedToStage(evt:Event = null):void		{			if (evt != null)				evt.target.removeEventListener(Event.ADDED_TO_STAGE , this.addedToStage);			// Setups graphic objects			this.closingButton.buttonMode = true;			this.closingButton.mouseChildren = false;			this.sendButton.buttonMode = true;			this.sendButton.mouseChildren = false;			this.filters = [this.theShadow , this.theBlur];			this.serverAnswer.visible = false;			this.serverAnswer.alpha = 0;			// Fills needed fields			for(var index:int = 0; index < this.numChildren; index++)			{				var theName:String = this.getChildAt(index).name;				var theContent:String = this.XMLParameters.labels.label.(@object == theName).toString();				var atPattern:RegExp = /{at}/g;				var dotPattern:RegExp = /{dot}/g;				theContent = theContent.replace(atPattern , '@');				theContent = theContent.replace(dotPattern , '.');				if (theContent != null && theContent.length > 0)					TextField(this.getChildAt(index)).htmlText = theContent;			}		}				/**		 * Displays the page		 * @param	Function	callback	an optional callback		 * @return	void		 */		public function displayElement(callback:Function = null):void		{			// Prepares			this.alpha = 0;			this.theBlur.blurX = 1;			this.theBlur.blurY = this.theBlurAmount;			this.y = this.currentY - this.displayAmplitude;			this.visible = true;			TweenLite.to(this , this.displaySpeed , {blurFilter:{blurX:0 , blurY:0} , alpha:1 , y:currentY , ease:Back.easeOut});			if (callback != null)				TweenLite.delayedCall(this.displaySpeed , callback);			this.closingButton.addEventListener(MouseEvent.CLICK , closePage);			this.sendButton.addEventListener(MouseEvent.CLICK , sendForm);		}				/**		 * Hides the page		 * @param	Function	callback	an optional callback		 * @return	void		 */		public function hideElement(callback:Function = null):void		{			this.closingButton.removeEventListener(MouseEvent.CLICK , closePage);			this.sendButton.removeEventListener(MouseEvent.CLICK , sendForm);			TweenLite.to(this , this.displaySpeed , {blurFilter:{blurX:1 , blurY:theBlurAmount} , alpha:0 , y:currentY + displayAmplitude});			TweenLite.delayedCall(this.displaySpeed / 1.5 , elementHidden , [callback]);		}				/**		 * Called when the page is hidden		 * @param	Function	callback	the callback		 * @return	void		 */		private function elementHidden(callback:Function):void		{			this.visible = false;			if (callback != null)				callback();		}				/**		 * Closes the page		 * @param	MouseEvent	evt		the mouse event		 * @return	void		 */		private function closePage(evt:MouseEvent):void		{			this.hideElement(this.closeCallback);		}				/**		 * Tries to send the form		 * @param	MouseEvent	evt		the click event		 * @return	void		 */		private function sendForm(evt:MouseEvent):void		{			Main.debug('Contact: sending form data to ' + this.formURL);			// Prepares the request			var parameters:URLVariables = new URLVariables();			parameters.name = this.nameInput.text;			parameters.mail = this.mailInput.text;			parameters.message = this.messageInput.text;			var formRequest:URLRequest = new URLRequest(this.formURL);			formRequest.data = parameters;						formRequest.method = this.formMethod;			var formLoader:URLLoader = new URLLoader();			formLoader.dataFormat = URLLoaderDataFormat.TEXT;			formLoader.addEventListener(Event.COMPLETE , formSent);			formLoader.load(formRequest);		}				/**		 * The form has been sent: gets the answer from the server		 * @param	Event	evt		the loader event		 * @return	void		 */		private function formSent(evt:Event):void		{			this.lastAction = evt.target.data;			Main.debug('Form processing answer: ' + this.lastAction);			this.displayMessage(this.XMLParameters.dialogs.dialog.(@id == this.lastAction).toString());			if (this.lastAction == 'MAIL_OK')			{				this.nameInput.text = '';				this.mailInput.text = '';				this.messageInput.text = '';			}		}				/**		 * Displays a message		 * @param	String	msg		the message		 * @return	void		 */		private function displayMessage(msg:String):void		{			var initialSpeed:Number;			initialSpeed = (this.serverAnswer.alpha != 0) ? this.messagesSpeed : 0;			this.serverAnswer.visible = true;			var theFirst:TweenLite = new TweenLite(this.serverAnswer , initialSpeed , {alpha:0 , onComplete:function() {  serverAnswer.textLabel.htmlText = msg; }});						var theSecond:TweenLite = new TweenLite(this.serverAnswer , this.messagesSpeed , {alpha:1});			var tweens:TimelineLite = new TimelineLite();			tweens.append(theFirst);			tweens.append(theSecond);			tweens.play();		}				/**		 * Resizes the page		 * @param	int		contextWidth	the width		 * @param	int		contextHeight	the height		 * @param	Number	speed			the speed		 * @return	void		 */		public function resizeElement(contextWidth:int , contextHeight:int , speed:Number):void		{			var calculatedY:int = int((contextHeight - (this.height - this.closingButton.height)) / 2);			TweenLite.to(this , speed , {x:int((contextWidth - (this.width - this.closingButton.width)) / 2) , y:calculatedY , ease:Back.easeOut});			this.currentY = calculatedY;		}	}}