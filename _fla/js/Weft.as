package js{	import flash.display.MovieClip;	import flash.display.BitmapData;	import flash.events.Event;		public class Weft extends MovieClip	{				private var theBitmapData:BitmapData;		private var alphaBackground:MovieClip;				/**		 * Inits the weft with the given bitmapadata		 * @param	BitmapData	bitmapData	the bitmap		 * @param	Number		backAlpha	the alpha		 */		public function Weft(bitmapData:BitmapData , backAlpha:Number)		{			this.theBitmapData = bitmapData;			this.alphaBackground = new MovieClip();			this.alphaBackground.alpha = backAlpha;			this.alpha = 0;			if (stage)				this.addedToStage(null);			else				this.addEventListener(Event.ADDED_TO_STAGE , this.addedToStage);		}				/**		 * Fired when added to stage		 * @param	Event	evt		the event		 * @return	void		 */		private function addedToStage(evt:Event = null):void		{			if (evt != null)				evt.target.removeEventListener(Event.ADDED_TO_STAGE , this.addedToStage);			this.addChild(this.alphaBackground);		}				/**		 * Resizes		 * @param	int		theWidth	the wanted width		 * @param	int		theHeight	the wanted height		 * @param	Number	speed		the speed		 * @return	void		 */		public function resizeWeft(theWidth:int , theHeight:int , speed:Number):void		{			this.alphaBackground.graphics.clear();			this.alphaBackground.graphics.beginFill(0x000000);			this.alphaBackground.graphics.drawRect(0 , 0 , theWidth , theHeight);			this.alphaBackground.graphics.endFill();			this.graphics.clear();			this.graphics.beginBitmapFill(this.theBitmapData);			this.graphics.drawRect(0 , 0 , theWidth , theHeight);			this.graphics.endFill();		}				/**		 * Displays the weft		 * @return	void		 */		public function displayWeft():void		{			this.alpha = 1;		}	}}