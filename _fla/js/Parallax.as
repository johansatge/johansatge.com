package js{	import flash.display.MovieClip;	import flash.display.BitmapData;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.display.Bitmap;	import js.ParallaxLoaderEvent;	import com.greensock.TweenLite;		public class Parallax extends MovieClip	{				// Public constant (loading purposes)		public static var BITMAPS_LOADING = 'parallax_bitmaps_loading';		public static var OBJECT_READY = 'parallax_object_ready';		public static var BITMAPS_ERROR = 'parallax_bitmaps_error';				// Private vars		private var loadList:Array;		private var picturesCount:int;		private var picturesLoadedCount:int;		private var pictures:Array;		private var loadingInfo:Object;		private var smoothPictures:Boolean;		private var inertia:Number;				/**		 * Inits the parallax object		 * @param	Array	pictures	the pictures list (URLs and amplitudes)		 * @param	Boolean	smooth		smooth parallax items ?		 */		public function Parallax(pictures:Array , smooth:Boolean , inertia:Number)		{			this.loadList = pictures;			this.picturesCount = pictures.length;			this.picturesLoadedCount = 0;			this.pictures = new Array();			this.loadingInfo = new Array();			this.smoothPictures = smooth;			this.inertia = inertia;		}				/**		 * Loads the pictures		 * @return	void		 */		public function loadPictures():void		{			var pictureIndex:int = 0;			for each(var picture:Object in this.loadList)			{				this.loadPicture(picture.filename , pictureIndex , picture.amplitude);				pictureIndex ++;			}		}				/**		 * Loads a picture		 * @param	String		picture			the picture to load (URL)		 * @param	int			pictureIndex	the index of the picture		 * @param	int			amplitude		the allowed amplitude		 * @return	void		 */		private function loadPicture(picture:String , pictureIndex:int , amplitude:int):void		{			var loader:ParallaxLoader = new ParallaxLoader(pictureIndex , amplitude);			loader.load(new URLRequest(picture)); 			loader.contentLoaderInfo.addEventListener(Event.COMPLETE , pictureLoaded);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS , pictureLoading);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR , pictureLoadingFailed);			Main.debug('Tries to load picture: ' + picture);		}		/**		 * A picture is being loaded		 * @param	ProgressEvent	evt		the progress event		 * @return	void		 */		private function pictureLoading(evt:ProgressEvent):void		{			// Saves the current loading state			this.loadingInfo ['' + evt.bytesTotal] = evt.bytesLoaded;			// Calculates the total bytes amount to load, and the loaded ones			var totalBytes:int = 0;			var loadedBytes:int = 0;			var picturesBeingLoaded:int = 0;			for (var picture:String in this.loadingInfo)			{				totalBytes += int(picture);				loadedBytes += int(this.loadingInfo [picture]);				picturesBeingLoaded ++;			}			// Calculates and sends the percentage			var percentage:Number;			if (picturesBeingLoaded < this.picturesCount)				percentage = 0;			else				percentage = Math.floor((loadedBytes / totalBytes) * 1000) / 10;			this.dispatchEvent(new ParallaxLoaderEvent(Parallax.BITMAPS_LOADING , percentage));		}				/**		 * An error occurred when loading a picture		 * @param	IOErrorEvent	evt		the IO event		 * @return	void		 */		private function pictureLoadingFailed(evt:IOErrorEvent):void		{			this.dispatchEvent(new Event(Parallax.BITMAPS_ERROR));		}						/**		 * A picture has been loaded		 * @param	Event	evt		the event		 * @return	void		 */		private function pictureLoaded(evt:Event):void		{			evt.target.removeEventListener(ProgressEvent.PROGRESS , pictureLoading);			evt.target.removeEventListener(IOErrorEvent.IO_ERROR , pictureLoadingFailed);			evt.target.removeEventListener(Event.COMPLETE , pictureLoaded);			// Gets the bitmap and creates a new picture			var bitmap:Bitmap = Bitmap(evt.target.content);			bitmap.smoothing = this.smoothPictures;			var loader:ParallaxLoader = ParallaxLoader(evt.target.loader);			this.pictures [loader.getIndex()] = new ParallaxPicture(bitmap , loader.getAmplitude());			// Detects if all pictures have been loaded			this.picturesLoadedCount ++;			Main.debug('Picture loaded: ' + evt.target.url + ' (' + this.picturesLoadedCount + ' on ' + this.picturesCount + ' are ready)');			if (this.picturesLoadedCount >= this.picturesCount)				this.picturesLoaded();		}				/**		 * All pictures loaded, object ready		 * @return	void		 */		private function picturesLoaded():void		{			for each(var picture:ParallaxPicture in this.pictures)				this.addChild(picture);			this.dispatchEvent(new Event(Parallax.OBJECT_READY));		}		/**		 * Resizes each layer		 * @param	int		theWidth	context width		 * @param	int		theHeight	context height		 * @param	Number	speed		the speed		 * @return	void		 */		public function resizeLayers(contextWidth:int , contextHeight:int , speed:Number):void		{			for(var index:int = 0; index < this.numChildren; index++)				ParallaxPicture(this.getChildAt(index)).setDimensionsFor(contextWidth , contextHeight);		}				/**		 * Moves the layers depending on the mouse position		 * @param	int		posX	the mouse position on X		 * @param	int		posY	the mouse position on Y		 * @param	int		theWidth	context width		 * @param	int		theHeight	context height		 * @return	true		 */		public function moveLayers(posX:int , posY:int , theWidth:int , theHeight:int , speed:int = -1):void		{			var theSpeed:Number = (speed == -1) ? this.inertia : speed;			for(var index:int = 0; index < this.numChildren; index++)				ParallaxPicture(this.getChildAt(index)).movePicture(posX , posY , theWidth , theHeight , theSpeed);		}	}}