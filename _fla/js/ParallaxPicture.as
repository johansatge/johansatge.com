package js{	import flash.display.MovieClip;	import flash.display.Bitmap;	import com.greensock.TweenLite;	import com.greensock.easing.Quad;		public class ParallaxPicture extends MovieClip	{				private var picture:Bitmap;		private var amplitude:int;		private var theWidth:int;		private var theHeight:int;				/**		 * Inits the picture		 * @param	picture		Bitmap	the bitmap		 * @param	amplitude	int		the allowed amplitude		 */		public function ParallaxPicture(picture:Bitmap , amplitude:int)		{			this.picture = picture;			this.theWidth = picture.width;			this.theHeight = picture.height;			this.amplitude = amplitude;			this.addChild(this.picture);		}				/**		 * Sets the dimensions		 * @param	int		contextWidth 	context width		 * @param	int		contextHeight	context height		 * @return	void		 */		public function setDimensionsFor(contextWidth:int , contextHeight:int):void		{			var calculatedWidth:int;			var calculatedHeight:int;			// Calculates the dimensions to adjust the height			if (contextWidth / contextHeight <= this.theWidth / this.theHeight)			{				calculatedHeight = contextHeight + this.getAmplitude(contextWidth , contextHeight);				calculatedWidth = this.theWidth / (this.theHeight / (contextHeight + this.getAmplitude(contextWidth , contextHeight)));			}			// Or the width			else			{				calculatedWidth = contextWidth + this.getAmplitude(contextWidth , contextHeight);				calculatedHeight = this.theHeight / (this.theWidth / (contextWidth + this.getAmplitude(contextWidth , contextHeight)));			}			this.width = calculatedWidth;			this.height = calculatedHeight;		}				/**		 * Moves the picture		 * @param	int		posX			the mouse position on X		 * @param	int		posY			the mouse position on Y		 * @param	int		contextWidth	context width		 * @param	int		contextHeight	context height		 * @param	Number	inertia			inertia when the mouse doesn't move		 * @return	void		 */		public function movePicture(posX:int , posY:int , contextWidth:int , contextHeight:int , inertia:Number):void		{			var centerX:Number = (contextWidth - this.width) / 2;			var centerY:Number = (contextHeight - this.height) / 2;			var currentAmplitude:Number = this.getAmplitude(contextWidth , contextHeight) / 2;			var theX:Number = this.convertRange(0 , contextWidth , posX , centerX + currentAmplitude , centerX - currentAmplitude);			var theY:Number = this.convertRange(0 , contextHeight , posY , centerY + currentAmplitude / 4 , centerY - currentAmplitude / 4);			TweenLite.to(this , inertia , {x:theX , y:theY , ease:Quad.easeOut});		}						/**		 * Returns the picture amplitude depending on the given context		 * @param	int		contextWidth		 * @param	int		contextHeight		 * @return	int		 */		private function getAmplitude(contextWidth:int , contextHeight:int):Number		{			// Calculates the amplitude to adjust the height			if (contextWidth / contextHeight <= this.theWidth / this.theHeight)				return this.amplitude / (this.theHeight / contextHeight);			// Or the width			else				return this.amplitude / (this.theWidth / contextWidth);		}		/**		 * Ranges calculation: Takes a range and a value in it, and translates the value using a second range		 * @param	Number	range1Min		 * @param	Number	range1Max		 * @param	Number 	range1Value		 * @param	Number	range2Min		 * @param	Number	range2Max		 * @return	Number		 */		private function convertRange(range1Min:Number , range1Max:Number , range1Value:Number , range2Min:Number , range2Max:Number):Number		{			return ((range1Value - range1Min) / ((range1Max - range1Min) / (range2Max - range2Min))) + range2Min;		}			}}