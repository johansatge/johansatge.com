package js{	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Bitmap;	import flash.events.MouseEvent;	import flash.display.Bitmap;	import flash.filters.BlurFilter;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import com.greensock.TweenLite;	import com.greensock.easing.Back;	import com.greensock.easing.Cubic;		public class SubmenuItem extends MovieClip	{										private var itemLabel:String;		private var blackDust:Bitmap;		private var margin:int;		private var padding:int;		private var blackContainer:MovieClip;		private var theBlur:BlurFilter;		private var blurAmount:int;		private var theLink:String;		private var theTarget:String;		private var displaySpeed:Number;		private var displayDelayAfter:Number;										/**		 * Inits the submenu		 * @param	XML		parameters	the submenu list		 * @param	Bitmap	blackDust	the background bitmap		 */		public function SubmenuItem(parameters:XML , blackDust:Bitmap)		{			this.visible = false;			this.theLink = parameters.@url.toString();			this.theTarget = parameters.@target.toString();			this.displayDelayAfter = Number(parameters.@delay.toString());			this.itemLabel = parameters.@label.toString();			this.blackDust = blackDust;			this.margin = int(parameters.@margin.toString());			this.padding = int(parameters.@padding.toString());			this.blurAmount = int(parameters.@blur.toString());			this.theBlur = new BlurFilter(0 , 0 , 1);			this.blurAmount = int(parameters.@blur.toString());			this.blackContainer = new MovieClip();			this.displaySpeed = Number(parameters.@speed.toString());			this.mouseChildren = false;			this.buttonMode = true;			this.filters = [this.theBlur];			// Waits for stage			if (stage)				this.addedToStage(null);			else				this.addEventListener(Event.ADDED_TO_STAGE , this.addedToStage);		}				/**		 * Fired when added to stage		 * @param	Event	evt		the event		 * @return	void		 */		private function addedToStage(evt:Event = null):void		{			if (evt != null)				evt.target.removeEventListener(Event.ADDED_TO_STAGE , this.addedToStage);			// Sets labels			this.menuLabelText.text = this.itemLabel;			this.menuLabelText.width = this.menuLabelText.textWidth + 5;			// Sets black container			this.blackContainer.addChild(this.blackDust);			this.blackContainer.addChild(this.menuLabelText);			this.blackContainer.addChild(this.blackMask);			this.blackMask.x = 0;			this.blackMask.y = 0;			this.blackMask.width = this.menuLabelText.width + (this.padding * 2);			this.blackMask.height = this.menuLabelText.height + (this.padding * 2);			this.blackDust.x = this.randomNumber(-(this.blackDust.width - this.blackMask.width) , 0);			this.blackDust.y = this.randomNumber(-(this.blackDust.height - this.blackMask.height) , 0);						this.blackContainer.y = int(-this.blackMask.height / 2);			this.blackContainer.mask = this.blackMask;			this.menuLabelText.x = this.padding;			this.menuLabelText.y = this.padding;			this.addChild(this.blackContainer);		}				/**		 * Gets the delay to apply after the display animation		 * @return	Number		 */		public function getDelayAfter():Number		{			return this.displayDelayAfter;		}				/**		 * Displays the item		 * @param	Number		delay		the animation delay		 * @param	Function	callback	the function to call when the animation is done (optional)		 * @return	void		 */		public function displayItem(animationDelay:Number , callback:Function = null):void		{			// Prepares			this.alpha = 0;			this.theBlur.blurX = 0;			this.theBlur.blurY = this.blurAmount;			this.filters = [this.theBlur];			this.visible = true;			// Tweens			TweenLite.to(this , this.displaySpeed , {alpha:1 , blurFilter:{blurX:0 , blurY:0} , delay:animationDelay , onComplete:callback});			this.addEventListener(MouseEvent.CLICK , onClick);		}		/**		 * Hides an item		 * @param	Number		delay		the animation delay		 * @param	Function	callback	the function to call when the animation is done (optional)		 * @return	void		 */		public function hideItem(animationDelay:Number , callback:Function = null):void		{			// Tweens			TweenLite.to(this , this.displaySpeed , {alpha:0 , blurFilter:{blurX:0 , blurY:blurAmount} , delay:animationDelay , onComplete:hidden , onCompleteParams:[callback]});			this.removeEventListener(MouseEvent.CLICK , onClick);		}				/**		 * Called when the item has been hidden		 * @param	Function	callback	optional callback		 * @return	void		 */		private function hidden(callback:Function):void		{			this.visible = false;			if (callback != null)				callback();		}		/**		 * Called on click		 * @param	MouseEvent	evt		the mouse event		 * @return	void		 */		private function onClick(evt:MouseEvent):void		{			navigateToURL(new URLRequest(this.theLink) , this.theTarget);		}				/**		 * Returns the item width		 * @return	int		 */		public function getWidth():int		{			return this.blackMask.width;		}				/**		 * Returns a random number		 * @param	int		low		the lowest one		 * @param	int		high	the highest one		 */		function randomNumber(low:int , high:int):Number		{		  return Math.floor(Math.random() * (1 + high - low)) + low;		}	}}